version: "3.8"
services:
  eurekaserver:
    image: thucng04/eurekaserver:s1
    container_name: eurekaserver-ms
    ports:
      - "8070:8070"
    environment:
      SPRING_APPLICATION_NAME: eurekaserver
    healthcheck:
      test: "curl --fail --silent localhost:8070/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    networks:
      - thuc-bookings
    deploy:
      resources:
        limits:
          memory: 700m
  bookings:
    image: thucng04/bookings:s1
    container_name: bookings-ms
    ports:
      - "8081:8081"
    environment:
      SPRING_APPLICATION_NAME : bookings
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE}
      SPRING_DATASOURCE_URL: ${DB_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
      SPRING_DATA_REDIS_HOST: ${SPRING_DATA_REDIS_HOST}
      SPRING_RABBITMQ_HOST: ${SPRING_RABBITMQ_HOST}
      SPRING_RABBITMQ_PORT: ${SPRING_RABBITMQ_PORT}
      SPRING_RABBITMQ_USERNAME: ${SPRING_RABBITMQ_USERNAME}
      SPRING_RABBITMQ_PASSWORD: ${SPRING_RABBITMQ_PASSWORD}
    healthcheck:
      test: "curl --fail --silent localhost:8081/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
    networks:
      - thuc-bookings
    deploy:
      resources:
        limits:
          memory: 700m
  messages:
    image: thucng04/messages:s1
    container_name: messages-ms
    ports:
      - "8084:8084"
    environment:
      SPRING_APPLICATION_NAME : messages
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_CLIENT_URL}
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      MAIL_PORT: ${MAIL_PORT}
      MAIL_SMTP_AUTH: true
      MAIL_SMTP_STARTTLS_ENABLE: true
      SPRING_RABBITMQ_HOST: ${SPRING_RABBITMQ_HOST}
      SPRING_RABBITMQ_PORT: ${SPRING_RABBITMQ_PORT}
      SPRING_RABBITMQ_USERNAME: ${SPRING_RABBITMQ_USERNAME}
      SPRING_RABBITMQ_PASSWORD: ${SPRING_RABBITMQ_PASSWORD}
    healthcheck:
      test: "curl --fail --silent localhost:8084/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    depends_on:
      rabbitmq:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
    networks:
      - thuc-bookings
    deploy:
      resources:
        limits:
          memory: 700m
  payments:
    image: thucng04/payments:s1
    container_name: payments-ms
    ports:
      - "8083:8083"
    environment:
      SPRING_APPLICATION_NAME: payments
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE}
      PAYMENT_VNPAY_VNP_PAYURL: ${PAYMENT_VNPAY_VNP_PAYURL}
      PAYMENT_VNPAY_VNP_TMNCODE: ${PAYMENT_VNPAY_VNP_TMNCODE}
      PAYMENT_VNPAY_SECRETKEY: ${PAYMENT_VNPAY_SECRETKEY}
      PAYMENT_VNPAY_VNP_RETURNURL: ${PAYMENT_VNPAY_VNP_RETURNURL}
      PAYMENT_VNPAY_VNP_VERSION: ${PAYMENT_VNPAY_VNP_VERSION}
      PAYMENT_VNPAY_VNP_COMMAND: ${PAYMENT_VNPAY_VNP_COMMAND}
      PAYMENT_VNPAY_ORDERTYPE: ${PAYMENT_VNPAY_ORDERTYPE}

      REFUND_VNPAY_VNP_REFUNDURL: ${REFUND_VNPAY_VNP_REFUNDURL}
      REFUND_VNPAY_VNP_VERSION: ${REFUND_VNPAY_VNP_VERSION}
      REFUND_VNPAY_VNP_COMMAND: ${REFUND_VNPAY_VNP_COMMAND}
      REFUND_VNPAY_VNP_TMNCODE: ${REFUND_VNPAY_VNP_TMNCODE}
      REFUND_VNPAY_SECRETKEY: ${REFUND_VNPAY_SECRETKEY}

      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
      SPRING_RABBITMQ_HOST: ${SPRING_RABBITMQ_HOST}
      SPRING_RABBITMQ_PORT: ${SPRING_RABBITMQ_PORT}
      SPRING_RABBITMQ_USERNAME: ${SPRING_RABBITMQ_USERNAME}
      SPRING_RABBITMQ_PASSWORD: ${SPRING_RABBITMQ_PASSWORD}

    networks:
      - thuc-bookings
    healthcheck:
      test: "curl --fail --silent localhost:8083/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgresql:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 700m
  rooms:
    image: thucng04/rooms:s1
    container_name: rooms-ms
    ports:
      - "8080:8080"
    environment:
      SPRING_APPLICATION_NAME: rooms
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE}
      CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME}
      CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY}
      CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET}
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
      SPRING_DATA_REDIS_HOST: ${SPRING_DATA_REDIS_HOST}
      SPRING_RABBITMQ_HOST: ${SPRING_RABBITMQ_HOST}
      SPRING_RABBITMQ_PORT: ${SPRING_RABBITMQ_PORT}
      SPRING_RABBITMQ_USERNAME: ${SPRING_RABBITMQ_USERNAME}
      SPRING_RABBITMQ_PASSWORD: ${SPRING_RABBITMQ_PASSWORD}
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    networks:
      - thuc-bookings
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 700m
  users:
    image: thucng04/users:s1
    container_name: users-ms
    ports:
      - "8082:8082"
    environment:
      SPRING_APPLICATION_NAME: users
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE}

      # Keycloak Credential
      KEYCLOAK_CREDENTIAL_AUTH_SERVER_URL: ${KEYCLOAK_CREDENTIAL_AUTH_SERVER_URL}
      KEYCLOAK_CREDENTIAL_CLIENT_ID: ${KEYCLOAK_CREDENTIAL_CLIENT_ID}
      KEYCLOAK_CREDENTIAL_CLIENT_SECRET: ${KEYCLOAK_CREDENTIAL_CLIENT_SECRET}
      KEYCLOAK_CREDENTIAL_GRANT_TYPE: ${KEYCLOAK_CREDENTIAL_GRANT_TYPE}
      KEYCLOAK_CREDENTIAL_REALM: ${KEYCLOAK_CREDENTIAL_REALM}

    # Keycloak Authorization
      KEYCLOAK_AUTHORIZATION_TOKEN_ENDPOINT: ${KEYCLOAK_AUTHORIZATION_TOKEN_ENDPOINT}
      KEYCLOAK_AUTHORIZATION_LOGOUT_ENDPOINT: ${KEYCLOAK_AUTHORIZATION_LOGOUT_ENDPOINT}
      KEYCLOAK_AUTHORIZATION_CLIENT_ID: ${KEYCLOAK_AUTHORIZATION_CLIENT_ID}
      KEYCLOAK_AUTHORIZATION_CLIENT_SECRET: ${KEYCLOAK_AUTHORIZATION_CLIENT_SECRET}
      KEYCLOAK_AUTHORIZATION_GRANT_TYPE: ${KEYCLOAK_AUTHORIZATION_GRANT_TYPE}
      KEYCLOAK_AUTHORIZATION_REALM: ${KEYCLOAK_AUTHORIZATION_REALM}
      KEYCLOAK_AUTHORIZATION_REDIRECT_URI: ${KEYCLOAK_AUTHORIZATION_REDIRECT_URI}

      # Database
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect

      # RabbitMQ
      SPRING_RABBITMQ_HOST: ${SPRING_RABBITMQ_HOST}
      SPRING_RABBITMQ_PORT: ${SPRING_RABBITMQ_PORT}
      SPRING_RABBITMQ_USERNAME: ${SPRING_RABBITMQ_USERNAME}
      SPRING_RABBITMQ_PASSWORD: ${SPRING_RABBITMQ_PASSWORD}

    networks:
      - thuc-bookings

    healthcheck:
      test: "curl --fail --silent localhost:8082/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s

    depends_on:
      rabbitmq:
        condition: service_healthy
      postgresql:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
      keycloak:
        condition: service_healthy

    deploy:
      resources:
        limits:
          memory: 700m

  gatewayserver:
    image: thucng04/gatewayserver:s1
    container_name: gatewayserver-ms
    ports:
      - "8072:8072"
    environment:
      SPRING_APPLICATION_NAME: gatewayserver
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${}
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI: ${}
    networks:
      - thuc-bookings
    depends_on:
      eurekaserver:
        condition: service_healthy
      bookings:
        condition: service_healthy
      rooms:
        condition: service_healthy
      messages:
        condition: service_healthy
      payments:
        condition: service_healthy
      users:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 700m
  redis:
    image: redis:latest
    container_name: redis-ms
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - thuc-bookings
  rabbitmq:
    image: rabbitmq:4-management
    container_name: rabbitmq-ms
    ports:
      - "5672:5672"       # Cổng AMQP
      - "15672:15672"     # Cổng Web UI
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

    volumes:
      - rabbitmqdata:/var/lib/rabbitmq
    networks:
      - thuc-bookings
  postgresql:
    image: postgis/postgis:15-3.3-alpine
    container_name: postgresql-ms
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d booking-hotel" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - thuc-bookings

  keycloak:
    image: quay.io/keycloak/keycloak:26.0.7
    container_name: keycloak-ms
    ports:
      - "7080:8080"
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: ${KC_BOOTSTRAP_ADMIN_USERNAME}
      KC_BOOTSTRAP_ADMIN_PASSWORD: ${KC_BOOTSTRAP_ADMIN_PASSWORD}
      KC_HEALTH_ENABLED: "true"
    command:
      - start-dev
    networks:
      - thuc-bookings
    healthcheck:
      test: [
        "CMD-SHELL",
        "exec 3<>/dev/tcp/localhost/9000 && echo -e 'GET /health/ready HTTP/1.1\\r\\nHost: localhost\\r\\nConnection: close\\r\\n\\r\\n' >&3 && cat <&3 | grep -q '200 OK'"
      ]
      interval: 30s
      timeout: 5s
      retries: 20
    volumes:
      - keycloakdata:/opt/keycloak/data


networks:
  thuc-bookings:
    driver: bridge
volumes:
  pgdata:
  rabbitmqdata:
  keycloakdata:
